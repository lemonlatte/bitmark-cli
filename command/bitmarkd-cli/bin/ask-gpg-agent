#!/bin/sh
# obtain aand cache a password from gpg-agent

ERROR()
{
  printf 'error: '
  printf "$@"
  printf '\n'
  exit 1
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    printf "$@"
    printf '\n'
  fi
  echo usage: $(basename "$0") cache-id error prompt description
  echo '       --help             -h            this message'
  echo '       --verbose          -v            more messages'
  echo '       --confirm=N        -c N          require N confirmations'
  echo '       --clear            -C            clear previous passphrase'
  echo '       --debug            -D            debuging messages'
  exit 1
}

# main
verbose=no
debug=no
confirm=0
clear=no

getopt=/usr/local/bin/getopt
[ -x "${getopt}" ] || getopt=getopt
args=$(${getopt} -o hvc:CD --long=help,verbose,confirm:,clear,debug -- "$@") ||exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-c|--confirm)
      confirm="$2"
      [ -z "$(printf '%s' "${confirm}" | tr -d '0-9')" ] || USAGE 'confirm="%s" must be numeric' "${confirm}"
      shift
      ;;

    (-C|--clear)
      clear=yes
      ;;

    (-D|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# validate arguments
[ $# -ne 4 ] && USAGE 'incorrect number of arguments'

# enable debuging
[ X"${debug}" = X"yes" ] && set -x

# process arguments
cache_id="$1"; shift
error=$(printf '%s' "$1" | sed 's/ /%20/g'); shift
prompt=$(printf '%s' "$1" | sed 's/ /%20/g'); shift
description=$(printf '%s' "$1" | sed 's/ /%20/g'); shift

[ -z "${cache_id}" ] && USAGE 'cache-id cannot be blank'
[ -z "${error}" ] && error=X
[ -z "${prompt}" ] && prompt=X
[ -z "${description}" ] && USAGE 'description cannot be blank'


[ X"${clear}" = X"yes" ] && printf 'CLEAR_PASSPHRASE --mode=normal %s' "${cache_id}" | gpg-connect-agent --decode --hex > /dev/null

result=$(printf 'GET_PASSPHRASE --repeat=%d %s %s %s %s\n' "${confirm}" "${cache_id}" "${error}" "${prompt}" "${description}" | gpg-connect-agent --decode --hex)

case "${result}" in
  (OK*)
    result="${result#OK }"
    printf '%s\n' "${result}" | xxd -r -p
    ;;

  (*)
    ERROR '%s' "${result}"
    ;;
esac
